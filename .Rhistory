add_markers(marker = list(size = 7, opacity = 0.6)) %>%
layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')))
ridge_cv <- cv.glmnet(x = X, y = Y, alpha = 0, nfolds = 5, type.measure = "deviance", family = "multinomial")
subset$GroupCat %>% as.character()
X <- subset[,-c(1:4)] %>% remove_identical_cal() %>% as.matrix()
Y <- subset$GroupCat %>% as.character() %>% as.matrix()
table(subset$GroupCat) %>% sort(decreasing = TRUE)
pca <- prcomp(X, scale = TRUE)
summary(pca)
X_PC <- pca$x[,1:17] %>% as.matrix()
data.frame(Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_PC) %>%
plot_ly(x = ~PC1,
y = ~PC2,
z = ~PC3,
color = ~Cluster,
colors = "Dark2",
text = ~Compound) %>%
add_markers(marker = list(size = 7, opacity = 0.6)) %>%
layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')))
ridge_cv <- cv.glmnet(x = X, y = Y, alpha = 0, nfolds = 5, type.measure = "deviance", family = "multinomial")
subset[,4]
subset <- data %>% filter(X == "O")
X <- subset[,-c(1:4)] %>% remove_identical_cal() %>% as.matrix()
Y <- subset[,4] %>% as.matrix()
table(subset$GroupCat) %>% sort(decreasing = TRUE)
pca <- prcomp(X, scale = TRUE)
summary(pca)
X_PC <- pca$x[,1:17] %>% as.matrix()
data.frame(Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_PC) %>%
plot_ly(x = ~PC1,
y = ~PC2,
z = ~PC3,
color = ~Cluster,
colors = "Dark2",
text = ~Compound) %>%
add_markers(marker = list(size = 7, opacity = 0.6)) %>%
layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')))
ridge_cv <- cv.glmnet(x = X, y = Y, alpha = 0, nfolds = 5, type.measure = "deviance", family = "multinomial")
tb_ridge = prediction_table(alpha = 0, lambda = ridge_cv$lambda.min)
tb_ridge$r %>% print_accurate_tb()
tb_ridge$t %>% highlight_tb_count()
tb_ridge$t %>% highlight_tb_count()
tb_ridge$t %>% highlight_tb_percent()
tb_ridge
ridge_cv$lambda.min
ridge_cv = cv.glmnet(x = X, y = Y, alpha = 0, nfolds = 5, type.measure = "deviance", family = "multinomial")
table(data$X) %>% sort(decreasing = TRUE)
table(subset$GroupCat) %>% sort(decreasing = TRUE)
data <-
read.csv("data/filledDatabaseNUMONLY_051820.csv") %>%
clean_data() %>%
filter(GroupCat %in% c(2,3,5,6)) %>%
mutate(GroupCat ,
GroupCat = recode(GroupCat,
"2" = "LiNb03",
"4" = "NCOT",
"3" = "Cubic",
"5" = "Tilted",
"6" = "Hexagonal"),
GroupCat = factor(GroupCat, levels = c("Cubic","Tilted","Hexagonal","LiNb03","NCOT")))
table(data$X) %>% sort(decreasing = TRUE)
subset <- data %>% filter(X == "O")
X <- subset[,-c(1:4)] %>% remove_identical_cal() %>% as.matrix()
Y <- subset[,4] %>% as.matrix()
table(subset$GroupCat) %>% sort(decreasing = TRUE)
Y <- subset[,4] %>% droplevels() %>% as.matrix()
table(subset$GroupCat) %>% sort(decreasing = TRUE)
Y <- subset$GroupCat %>% droplevels() %>% as.matrix()
table(subset$GroupCat) %>% sort(decreasing = TRUE)
Y <- subset$GroupCat %>% drop() %>% as.matrix()
table(subset$GroupCat) %>% sort(decreasing = TRUE)
Y <- subset$GroupCat %>% droplevels() %>% as.matrix()
table(subset$GroupCat) %>% sort(decreasing = TRUE)
Y <- subset$GroupCat %>% droplevels() %>% as.matrix()
table(subset$GroupCat) %>% sort(decreasing = TRUE)
data <-
read.csv("data/filledDatabaseNUMONLY_051820.csv") %>%
clean_data() %>%
filter(GroupCat %in% c(2,3,5,6)) %>%
mutate(GroupCat ,
GroupCat = recode(GroupCat,
"2" = "LiNb03",
"4" = "NCOT",
"3" = "Cubic",
"5" = "Tilted",
"6" = "Hexagonal"),
GroupCat = factor(GroupCat, levels = c("Cubic","Tilted","Hexagonal","LiNb03")))
table(data$X) %>% sort(decreasing = TRUE)
subset <- data %>% filter(X == "O")
X <- subset[,-c(1:4)] %>% remove_identical_cal() %>% as.matrix()
Y <- subset$GroupCat %>% droplevels() %>% as.matrix()
table(subset$GroupCat) %>% sort(decreasing = TRUE)
pca <- prcomp(X, scale = TRUE)
summary(pca)
X_PC <- pca$x[,1:17] %>% as.matrix()
data.frame(Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_PC) %>%
plot_ly(x = ~PC1,
y = ~PC2,
z = ~PC3,
color = ~Cluster,
colors = "Dark2",
text = ~Compound) %>%
add_markers(marker = list(size = 7, opacity = 0.6)) %>%
layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')))
ridge_cv = cv.glmnet(x = X, y = Y, alpha = 0, nfolds = 5, type.measure = "deviance", family = "multinomial")
library(tidyverse)
library(magrittr)
library(ggsci)
library(kableExtra)
library(glmnet)
library(plotly)
source("scripts/functions.R")
data <-
read.csv("data/filledDatabaseNUMONLY_051820.csv") %>%
clean_data() %>%
filter(GroupCat %in% c(2,3,5,6)) %>%
mutate(GroupCat ,
GroupCat = recode(GroupCat,
"2" = "LiNb03",
"4" = "NCOT",
"3" = "Cubic",
"5" = "Tilted",
"6" = "Hexagonal"),
GroupCat = factor(GroupCat, levels = c("Cubic","Tilted","Hexagonal","LiNb03")))
table(data$X) %>% sort(decreasing = TRUE)
subset <- data %>% filter(X == "O")
X <- subset[,-c(1:4)] %>% remove_identical_cal() %>% as.matrix()
Y <- subset$GroupCat %>% droplevels() %>% as.matrix()
table(subset$GroupCat) %>% sort(decreasing = TRUE)
data <-
read.csv("data/filledDatabaseNUMONLY_051820.csv") %>%
clean_data() %>%
filter(GroupCat %in% c(2,3,5,6)) %>%
mutate(GroupCat ,
GroupCat = recode(GroupCat,
"2" = "LiNb03",
"4" = "NCOT",
"3" = "Cubic",
"5" = "Tilted",
"6" = "Hexagonal"),
GroupCat = factor(GroupCat, levels = c("Cubic","Tilted","Hexagonal","LiNb03","NCOT")))
table(data$X) %>% sort(decreasing = TRUE)
subset <- data %>% filter(X == "O")
X <- subset[,-c(1:4)] %>% remove_identical_cal() %>% as.matrix()
Y <- subset$GroupCat %>% droplevels() %>% as.matrix()
table(subset$GroupCat) %>% sort(decreasing = TRUE)
data <-
read.csv("data/filledDatabaseNUMONLY_051820.csv") %>%
clean_data() %>%
filter(GroupCat %in% c(2,3,4,5,6)) %>%
mutate(GroupCat ,
GroupCat = recode(GroupCat,
"2" = "LiNb03",
"4" = "NCOT",
"3" = "Cubic",
"5" = "Tilted",
"6" = "Hexagonal"),
GroupCat = factor(GroupCat, levels = c("Cubic","Tilted","Hexagonal","LiNb03","NCOT")))
table(data$X) %>% sort(decreasing = TRUE)
subset <- data %>% filter(X == "O")
X <- subset[,-c(1:4)] %>% remove_identical_cal() %>% as.matrix()
Y <- subset$GroupCat %>% droplevels() %>% as.matrix()
table(subset$GroupCat) %>% sort(decreasing = TRUE)
pca <- prcomp(X, scale = TRUE)
summary(pca)
X_PC <- pca$x[,1:17] %>% as.matrix()
data.frame(Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_PC) %>%
plot_ly(x = ~PC1,
y = ~PC2,
z = ~PC3,
color = ~Cluster,
colors = "Dark2",
text = ~Compound) %>%
add_markers(marker = list(size = 7, opacity = 0.6)) %>%
layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')))
ridge_cv = cv.glmnet(x = X, y = Y, alpha = 0, nfolds = 5, type.measure = "deviance", family = "multinomial")
ridge_cv = cv.glmnet(x = X_PC, y = Y, alpha = 0, nfolds = 5, type.measure = "deviance", family = "multinomial")
library(tidyverse)
library(magrittr)
library(ggsci)
library(kableExtra)
library(glmnet)
library(plotly)
source("scripts/functions.R")
data <-
read.csv("data/filledDatabaseNUMONLY_051820.csv") %>%
clean_data() %>%
filter(GroupCat %in% c(2,3,4,5,6)) %>%
mutate(GroupCat ,
GroupCat = recode(GroupCat,
"2" = "LiNb03",
"4" = "NCOT",
"3" = "Cubic",
"5" = "Tilted",
"6" = "Hexagonal"),
GroupCat = factor(GroupCat, levels = c("Cubic","Tilted","Hexagonal","LiNb03","NCOT")))
table(data$X) %>% sort(decreasing = TRUE)
subset <- data %>% filter(X == "O")
X <- subset[,-c(1:4)] %>% remove_identical_cal() %>% as.matrix()
Y <- subset$GroupCat %>% droplevels() %>% as.matrix()
table(subset$GroupCat) %>% sort(decreasing = TRUE)
table(data$GroupCat) %>% sort(decreasing = TRUE)
data <-
read.csv("data/filledDatabaseNUMONLY_051820.csv") %>%
clean_data() %>%
filter(GroupCat %in% c(2,3,4,5,6)) %>%
mutate(GroupCat ,
GroupCat = recode(GroupCat,
"2" = "LiNb03",
"4" = "NCOT",
"3" = "Cubic",
"5" = "Tilted",
"6" = "Hexagonal"),
GroupCat = factor(GroupCat, levels = c("Cubic","Tilted","Hexagonal","LiNb03","NCOT")))
table(data$X) %>% sort(decreasing = TRUE)
subset <- data %>% filter(X == "O")
X <- subset[,-c(1:4)] %>% remove_identical_cal() %>% as.matrix()
Y <- subset$GroupCat %>% droplevels() %>% as.matrix()
table(subset$GroupCat) %>% sort(decreasing = TRUE)
pca <- prcomp(X, scale = TRUE)
summary(pca)
X_PC <- pca$x[,1:17] %>% as.matrix()
data.frame(Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_PC) %>%
plot_ly(x = ~PC1,
y = ~PC2,
z = ~PC3,
color = ~Cluster,
colors = "Dark2",
text = ~Compound) %>%
add_markers(marker = list(size = 7, opacity = 0.6)) %>%
layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')))
table(subset$GroupCat) %>% sort(decreasing = TRUE)
X <- subset[,-c(1:4)] %>% remove_identical_cal() %>% as.matrix()
subset <- data %>% filter(X == "O") %>% filter(GroupCat != "NCOT")
X <- subset[,-c(1:4)] %>% remove_identical_cal() %>% as.matrix()
Y <- subset$GroupCat %>% droplevels() %>% as.matrix()
pca <- prcomp(X, scale = TRUE)
summary(pca)
X_PC <- pca$x[,1:17] %>% as.matrix()
data.frame(Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_PC) %>%
plot_ly(x = ~PC1,
y = ~PC2,
z = ~PC3,
color = ~Cluster,
colors = "Dark2",
text = ~Compound) %>%
add_markers(marker = list(size = 7, opacity = 0.6)) %>%
layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')))
ridge_cv = cv.glmnet(x = X_PC, y = Y, alpha = 0, nfolds = 5, type.measure = "deviance", family = "multinomial")
tb_ridge = prediction_table(alpha = 0, lambda = ridge_cv$lambda.min)
tb_ridge$r %>% print_accurate_tb()
tb_ridge$t %>% highlight_tb_count()
subset <- data %>% filter(X == "O") %>% filter(GroupCat != "NCOT") %>% droplevels()
X <- subset[,-c(1:4)] %>% remove_identical_cal() %>% as.matrix()
Y <- subset$GroupCat %>% droplevels() %>% as.matrix()
pca <- prcomp(X, scale = TRUE)
summary(pca)
X_PC <- pca$x[,1:17] %>% as.matrix()
data.frame(Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_PC) %>%
plot_ly(x = ~PC1,
y = ~PC2,
z = ~PC3,
color = ~Cluster,
colors = "Dark2",
text = ~Compound) %>%
add_markers(marker = list(size = 7, opacity = 0.6)) %>%
layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')))
ridge_cv = cv.glmnet(x = X_PC, y = Y, alpha = 0, nfolds = 5, type.measure = "deviance", family = "multinomial")
tb_ridge = prediction_table(alpha = 0, lambda = ridge_cv$lambda.min)
tb_ridge$r %>% print_accurate_tb()
tb_ridge$t %>% highlight_tb_count()
tb_ridge$t %>% highlight_tb_percent()
tb_ridge$t %>% highlight_tb_percent()
tb_ridge$t
subset <- data %>% filter(X == "O")
table(subset$GroupCat) %>% sort(decreasing = TRUE)
subset <- data %>% filter(X == "O") %>% filter(GroupCat != "NCOT") %>% droplevels()
X <- subset[,-c(1:4)] %>% remove_identical_cal() %>% as.matrix()
Y <- subset$GroupCat %>% droplevels() %>% as.matrix()
folds <- createFolds(1:nrow(X), k = 5, list = TRUE, returnTrain = FALSE)
pca <- prcomp(X, scale = TRUE)
folds <- caret::createFolds(1:nrow(X), k = 5, list = TRUE, returnTrain = FALSE)
pca <- prcomp(X, scale = TRUE)
summary(pca)
X_PC <- pca$x[,1:17] %>% as.matrix()
data.frame(Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_PC) %>%
plot_ly(x = ~PC1,
y = ~PC2,
z = ~PC3,
color = ~Cluster,
colors = "Dark2",
text = ~Compound) %>%
add_markers(marker = list(size = 7, opacity = 0.6)) %>%
layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')))
ridge_cv = cv.glmnet(x = X_PC, y = Y, alpha = 0, nfolds = 5, type.measure = "deviance", family = "multinomial")
tb_ridge = prediction_table(alpha = 0, lambda = ridge_cv$lambda.min)
tb_ridge$r %>% print_accurate_tb()
tb_ridge$t %>% highlight_tb_count()
tb_ridge$t %>% highlight_tb_percent()
tb_ridge
tb_ridge$t[,-5] %>% highlight_tb_percent()
#### -------------   step 2: lasso   ------------- ####
lasso_cv = cv.glmnet(x = X_PC, y = Y, alpha = 1, nfolds = 5, type.measure = "deviance", family = "multinomial")
tb_lasso = prediction_table(alpha = 0, lambda = lasso_cv$lambda.min)
tb_lasso$r %>% print_accurate_tb()
tb_lasso$t %>% highlight_tb_count()
tb_lasso$t[,-5] %>% highlight_tb_percent()
ridge_cv = cv.glmnet(x = X_PC, y = Y, alpha = 0, nfolds = 5, type.measure = "deviance", family = "multinomial")
tb_ridge = prediction_table(alpha = 0, lambda = ridge_cv$lambda.min)
tb_ridge$r %>% print_accurate_tb()
tb_ridge$t %>% highlight_tb_count()
tb_ridge$t[,-5] %>% highlight_tb_percent()
tb_ridge$t %>% highlight_tb_count()
ridge_cv = cv.glmnet(x = X, y = Y, alpha = 0, nfolds = 5, type.measure = "deviance", family = "multinomial")
tb_ridge = prediction_table(alpha = 0, lambda = ridge_cv$lambda.min)
tb_ridge$r %>% print_accurate_tb()
tb_ridge$t %>% highlight_tb_count()
tb_ridge$t[,-5] %>% highlight_tb_percent()
ridge_cv = cv.glmnet(x = X_PC, y = Y, alpha = 0, nfolds = 5, type.measure = "deviance", family = "multinomial")
tb_ridge = prediction_table(alpha = 0, lambda = ridge_cv$lambda.min)
tb_ridge$r %>% print_accurate_tb()
tb_ridge$t %>% highlight_tb_count()
tb_ridge$t[,-5] %>% highlight_tb_percent()
ridge_cv = cv.glmnet(x = X_PC, y = Y, alpha = 0, nfolds = 5, type.measure = "deviance", family = "multinomial")
tb_ridge = prediction_table(alpha = 0, lambda = ridge_cv$lambda.min)
tb_ridge$r %>% print_accurate_tb()
tb_ridge$t %>% highlight_tb_count()
tb_ridge$t[,-5] %>% highlight_tb_percent()
#### -------------   step 2: lasso   ------------- ####
lasso_cv = cv.glmnet(x = X_PC, y = Y, alpha = 1, nfolds = 5, type.measure = "deviance", family = "multinomial")
tb_lasso = prediction_table(alpha = 0, lambda = lasso_cv$lambda.min)
tb_lasso$r %>% print_accurate_tb()
tb_lasso$t %>% highlight_tb_count()
tb_lasso$t[,-5] %>% highlight_tb_percent()
#### -------------   step 2: lasso   ------------- ####
lasso_cv = cv.glmnet(x = X, y = Y, alpha = 1, nfolds = 5, type.measure = "deviance", family = "multinomial")
tb_lasso = prediction_table(alpha = 0, lambda = lasso_cv$lambda.min)
tb_lasso$r %>% print_accurate_tb()
#### -------------   step 2: lasso   ------------- ####
lasso_cv = cv.glmnet(x = X, y = Y, alpha = 1, nfolds = 5, type.measure = "deviance", family = "multinomial")
tb_lasso = prediction_table(alpha = 0, lambda = lasso_cv$lambda.min)
tb_lasso$r %>% print_accurate_tb()
tb_lasso$t %>% highlight_tb_count()
tb_lasso$t[,-5] %>% highlight_tb_percent()
#### -------------   step 2: lasso   ------------- ####
lasso_cv = cv.glmnet(x = X_PC, y = Y, alpha = 1, nfolds = 5, type.measure = "deviance", family = "multinomial")
tb_lasso = prediction_table(alpha = 0, lambda = lasso_cv$lambda.min)
tb_lasso$r %>% print_accurate_tb()
tb_lasso$t %>% highlight_tb_count()
tb_lasso$t[,-5] %>% highlight_tb_percent()
#### -------------   step 2: lasso   ------------- ####
lasso_cv = cv.glmnet(x = X, y = Y, alpha = 1, nfolds = 5, type.measure = "deviance", family = "multinomial")
tb_lasso = prediction_table(alpha = 0, lambda = lasso_cv$lambda.min)
tb_lasso$r %>% print_accurate_tb()
tb_lasso$t %>% highlight_tb_count()
tb_lasso$t[,-5] %>% highlight_tb_percent()
ridge_cv = cv.glmnet(x = X_PC, y = Y, alpha = 0, nfolds = 5, type.measure = "deviance", family = "multinomial")
tb_ridge = prediction_table(alpha = 0, lambda = ridge_cv$lambda.min)
tb_ridge$r %>% print_accurate_tb()
ridge_cv = cv.glmnet(x = X, y = Y, alpha = 0, nfolds = 5, type.measure = "deviance", family = "multinomial")
tb_ridge = prediction_table(alpha = 0, lambda = ridge_cv$lambda.min)
tb_ridge$r %>% print_accurate_tb()
tb_ridge$t %>% highlight_tb_count()
tb_ridge$t[,-5] %>% highlight_tb_percent()
#### -------------   step 3: elastic net   ------------- ####
elastic_cv <-
train(Y ~., data = data.frame(X,GroupCat=Y), method = "glmnet",
trControl = trainControl("cv", number = 5),
tuneLength = 10)
#### -------------   step 3: elastic net   ------------- ####
elastic_cv <-
caret::train(Y ~., data = data.frame(X, GroupCat=Y), method = "glmnet",
trControl = trainControl("cv", number = 5),
tuneLength = 10)
#### -------------   step 3: elastic net   ------------- ####
library(caret)
elastic_cv <-
train(Y ~., data = data.frame(X, GroupCat=Y), method = "glmnet",
trControl = trainControl("cv", number = 5),
tuneLength = 10)
tb_elastic = prediction_table(alpha = elastic_cv$bestTune[[1]], lambda = elastic_cv$bestTune[[2]])
tb_elastic$r %>% print_accurate_tb()
tb_elastic$t %>% highlight_tb_count()
tb_elastic$t %>% highlight_tb_percent()
tb_elastic$t[,-5] %>% highlight_tb_percent()
tb_elastic$r %>% print_accurate_tb()
tb_elastic$t %>% highlight_tb_count()
tb_elastic$t[,-5] %>% highlight_tb_percent()
#### -------------   step 3: elastic net   ------------- ####
library(caret)
elastic_cv <-
train(Y ~., data = data.frame(X_PC, GroupCat=Y), method = "glmnet",
trControl = trainControl("cv", number = 5),
tuneLength = 10)
tb_elastic = prediction_table(alpha = elastic_cv$bestTune[[1]], lambda = elastic_cv$bestTune[[2]])
tb_elastic$r %>% print_accurate_tb()
tb_elastic$t %>% highlight_tb_count()
tb_elastic$t[,-5] %>% highlight_tb_percent()
data.frame(X_PC, GroupCat=Y)
elastic_cv <-
train(GroupCat ~., data = data.frame(X_PC, GroupCat=Y), method = "glmnet",
trControl = trainControl("cv", number = 5),
tuneLength = 10)
tb_elastic = prediction_table(alpha = elastic_cv$bestTune[[1]], lambda = elastic_cv$bestTune[[2]])
tb_elastic$r %>% print_accurate_tb()
tb_elastic$t %>% highlight_tb_count()
tb_elastic$t[,-5] %>% highlight_tb_percent()
elastic_cv <-
train(GroupCat ~., data = data.frame(X, GroupCat=Y), method = "glmnet",
trControl = trainControl("cv", number = 5),
tuneLength = 10)
tb_elastic = prediction_table(alpha = elastic_cv$bestTune[[1]], lambda = elastic_cv$bestTune[[2]])
tb_elastic$r %>% print_accurate_tb()
tb_elastic$t %>% highlight_tb_count()
tb_elastic$t[,-5] %>% highlight_tb_percent()
install.packages("rpart.plot")
library(tidyverse)
library(magrittr)
library(ggsci)
library(kableExtra)
library(glmnet)
library(plotly)
source("scripts/functions.R")
data <-
read.csv("data/filledDatabaseNUMONLY_051820.csv") %>%
clean_data() %>%
filter(GroupCat %in% c(2,3,4,5,6)) %>%
mutate(GroupCat ,
GroupCat = recode(GroupCat,
"2" = "LiNb03",
"4" = "NCOT",
"3" = "Cubic",
"5" = "Tilted",
"6" = "Hexagonal"),
GroupCat = factor(GroupCat, levels = c("Cubic","Tilted","Hexagonal","LiNb03","NCOT")))
table(data$X) %>% sort(decreasing = TRUE)
subset <- data %>% filter(X == "O")
table(subset$GroupCat) %>% sort(decreasing = TRUE)
subset <- data %>% filter(X == "O") %>% filter(GroupCat != "NCOT") %>% droplevels()
X <- subset[,-c(1:4)] %>% remove_identical_cal() %>% as.matrix()
Y <- subset$GroupCat %>% droplevels() %>% as.matrix()
folds <- caret::createFolds(1:nrow(X), k = 5, list = TRUE, returnTrain = FALSE)
pca <- prcomp(X, scale = TRUE)
summary(pca)
X_PC <- pca$x[,1:17] %>% as.matrix()
data.frame(Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_PC) %>%
plot_ly(x = ~PC1,
y = ~PC2,
z = ~PC3,
color = ~Cluster,
colors = "Dark2",
text = ~Compound) %>%
add_markers(marker = list(size = 7, opacity = 0.6)) %>%
layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')))
library(rpart)
library(rpart.plot)
train = sample(1:nrow(X), nrow(X)*0.8)
library(rpart)
library(rpart.plot)
train = sample(1:nrow(X), nrow(X)*0.8)
fit <- rpart(GroupCat ~.,
data = data.frame(X[train,], GroupCat=Y[train]), method = 'class')
rpart.plot(fit, extra = 106)
rpart.plot(fit)
subset <- data %>% filter(X == "O")
table(subset$GroupCat) %>% sort(decreasing = TRUE)
X <- subset[,-c(1:4)] %>% remove_identical_cal() %>% as.matrix()
Y <- subset$GroupCat %>% droplevels() %>% as.matrix()
folds <- caret::createFolds(1:nrow(X), k = 5, list = TRUE, returnTrain = FALSE)
train = sample(1:nrow(X), nrow(X)*0.8)
fit <- rpart(GroupCat ~.,
data = data.frame(X[train,], GroupCat=Y[train]), method = 'class')
rpart.plot(fit)
rpart.plot(fit)
