Reduce("+",t)
t = lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda) %>% factor(levels = levels(Y))
table(c(Y_pred), Y_test)
})
alpha = 0
lambda = ridge_cv$lambda.min
t = lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda) %>% factor(levels = levels(Y))
table(c(Y_pred), Y_test)
})
Reduce("+",t)
alpha = 0
lambda = ridge_cv$lambda.min
t = lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda) %>% factor(levels = levels(Y))
table(Y_pred, Y_test)
})
Reduce("+",t)
t
alpha = 0
lambda = ridge_cv$lambda.min
lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda) %>% factor(levels = levels(Y))
table(Y_pred, Y_test)
})
alpha = 0
lambda = ridge_cv$lambda.min
lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda) %>% factor(.,levels = levels(Y))
table(Y_pred, Y_test)
})
alpha = 0
lambda = ridge_cv$lambda.min
lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda)
table(factor(Y_pred, levels = levels(Y)), Y_test)
})
alpha = 1
lambda = lasso$lambda.min
lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda)
table(factor(Y_pred, levels = levels(Y)), Y_test)
})
Reduce("+",t)
alpha = 1
lambda = lasso$lambda.min
lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda)
table(as.factor(Y_pred, levels = levels(Y)), Y_test)
})
levels(Y)
Y
class(T)
class(Y)
alpha = 1
lambda = lasso$lambda.min
lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda)
table(as.factor(Y_pred), as.factor(Y_test))
})
Reduce("+",t)
lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda)
table(factor(Y_pred), factor(Y_test))
})
t = lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda)
table(factor(Y_pred), factor(Y_test))
})
Reduce("+",t)
Y_pred
Y_test
factor(Y_pred)
factor(Y_test)
table(factor(Y_pred), factor(Y_test))
class(Y_pred)
class(Y_test)
as.factor(Y_pred)
as.factor(Y_test)
table(as.factor(Y_pred), as.factor(Y_test))
t = lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda)
table(as.factor(Y_pred), as.factor(Y_test))
})
Reduce("+", t)
t[[1]] + t[[2]]
unlist(t)
do.call("+", t)
Reduce("+",t)
mapply(t, "+")
prediction_table <- function(alpha, lambda){
t = lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda)
table(as.factor(Y_pred), as.factor(Y_test))
})
t[[1]] + t[[2]] + t[[3]] + t[[4]] + t[[5]]
}
prediction_table(alpha = 0, lambda = ridge_cv$lambda.min)
prediction_table <- function(alpha, lambda){
t = lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda)
table(as.factor(Y_pred), as.factor(Y_test))
})
t[[1]] + t[[2]] + t[[3]] + t[[4]] + t[[5]]
}
alpha = 0
lambda = ridge_cv$lambda.min
t = lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda)
table(as.factor(Y_pred), as.factor(Y_test))
})
t[[1]] + t[[2]] + t[[3]] + t[[4]] + t[[5]]
t[[1]]
t[[2]]
t[[1]] + t[[2]]
mearge(t[[1]], t[[2]])
merge(t[[1]], t[[2]])
t = lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda)
table(factor(Y_pred), factor(Y_test))
})
t[[3]] + t[[4]]
prediction_table <- function(alpha, lambda){
t = lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda)
table(factor(Y_pred), factor(Y_test))
})
t[[1]] + t[[2]] + t[[3]] + t[[4]] + t[[5]]
}
t = lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda)
table(factor(Y_pred), factor(Y_test))
})
t[[1]] + t[[2]] + t[[3]] + t[[4]] + t[[5]]
t[[3]] + t[[4]]
t[[2]] + t[[3]] + t[[4]] + t[[5]]
t[[1]] + t[[2]] + t[[3]] + t[[4]] + t[[5]]
t[[1]] + t[[2]]
t[[1]]
t[[2]]
t = lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda)
table(factor(Y_pred, levels = levels(Y)), factor(Y_test))
})
t[[1]] + t[[2]] + t[[3]] + t[[4]] + t[[5]]
t[[1]]
levels(Y)
Y
t = lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda)
table(factor(Y_pred, levels = unique(Y)), factor(Y_test))
})
t[[1]] + t[[2]] + t[[3]] + t[[4]] + t[[5]]
t = lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda)
table(factor(Y_pred, levels = unique(Y)), factor(Y_test))
}) %>%
Reduce("+",.)
prediction_table <- function(alpha, lambda){
lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda)
table(factor(Y_pred, levels = unique(Y)), factor(Y_test))
}) %>%
Reduce("+",.)
}
prediction_table(alpha = 0, lambda = ridge_cv$lambda.min)
prediction_table <- function(alpha, lambda){
lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda)
table(factor(Y_pred, levels = unique(Y)), factor(Y_test))
}) %>%
Reduce("+",.) %>%
as.matrix()
}
highlight_table <- function(m){
diag(m) = cell_spec(diag(m),
background = ifelse(diag(m)>=0, "red","white"),
color = ifelse(diag(m)>=0, "white", "black"),
bold = ifelse(diag(m)>=0, T, F))
rbind(m,
Total = table(group_cat_text)) %>%
kable(escape = F, booktabs = T) %>%
kable_styling()
}
prediction_table(alpha = 0, lambda = ridge_cv$lambda.min) %>%
highlight_table()
levels(factor(Y))
prediction_table <- function(alpha, lambda){
lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda)
table(factor(Y_pred, levels = levels(factor(Y))), factor(Y_test))
}) %>%
Reduce("+",.) %>%
as.matrix()
}
prediction_table(alpha = 0, lambda = ridge_cv$lambda.min) %>%
highlight_table()
highlight_tb_count <- function(m){
diag(m) = cell_spec(diag(m),
background = ifelse(diag(m)>=0, "red","white"),
color = ifelse(diag(m)>=0, "white", "black"),
bold = ifelse(diag(m)>=0, T, F))
rbind(m,
Total = colSums(m)) %>%
kable(escape = F, booktabs = T) %>%
kable_styling()
}
tb_ridge %>% highlight_tb_count()
tb_ridge = prediction_table(alpha = 0, lambda = ridge_cv$lambda.min)
tb_ridge %>% highlight_tb_count()
tb_ridge
colSums(tb_ridge)
m = tb_ridge
diag(m) = cell_spec(diag(m),
background = ifelse(diag(m)>=0, "red","white"),
color = ifelse(diag(m)>=0, "white", "black"),
bold = ifelse(diag(m)>=0, T, F))
rbind(m,
Total = colSums(m)) %>%
kable(escape = F, booktabs = T) %>%
kable_styling()
rbind(m,
Total = colSums(m)) %>%
kable(escape = F, booktabs = T) %>%
kable_styling()
colSums(m)
m
highlight_tb_count <- function(m){
total = colSums(m)
diag(m) = cell_spec(diag(m),
background = ifelse(diag(m)>=0, "red","white"),
color = ifelse(diag(m)>=0, "white", "black"),
bold = ifelse(diag(m)>=0, T, F))
rbind(m, Total = total) %>%
kable(escape = F, booktabs = T) %>%
kable_styling()
}
tb_ridge %>% highlight_tb_count()
tb_lasso = prediction_table(alpha = 1, lambda = lass_cv$lambda.min)
tb_lasso = prediction_table(alpha = 1, lambda = lasso_cv$lambda.min)
tb_lasso %>% highlight_tb_count()
tb_lasso %>% highlight_tb_percent()
tb_ridge %>% highlight_tb_percent()
highlight_tb_percent <- function(m){
m2 = sweep(m,2,colSums(m),`/`) %>% round(2)
diag(m2) = cell_spec(diag(m2),
background = ifelse(diag(m2)>=0, "red","white"),
color = ifelse(diag(m2)>=0, "white", "black"),
bold = ifelse(diag(m2)>=0, T, F))
rbind(m2,
Total = rep("100%", ncol(m))) %>%
kable(escape = F, booktabs = T) %>%
kable_styling()
}
tb_ridge %>% highlight_tb_percent()
tb_ridge
mean(tb_ridge)
tb_ridge
(diag(tb_ridge) %>% sum) / sum(tb_ridge)
(diag(tb_lasso) %>% sum) / sum(tb_lasso)
highlight_tb_count <- function(m){
total = colSums(m)
diag(m) = cell_spec(diag(m),
background = ifelse(diag(m)>=0, "red","white"),
color = ifelse(diag(m)>=0, "white", "black"),
bold = ifelse(diag(m)>=0, T, F))
rbind(m, Total = total) %>%
kable(escape = F, booktabs = T) %>%
kable_styling()
}
tb_ridge = prediction_table(alpha = 0, lambda = ridge_cv$lambda.min)
(diag(tb_ridge) %>% sum) / sum(tb_ridge)
tb_ridge %>% highlight_tb_count()
tb_ridge %>% highlight_tb_percent()
tb_lasso = prediction_table(alpha = 1, lambda = lasso_cv$lambda.min)
(diag(tb_lasso) %>% sum) / sum(tb_lasso)
tb_lasso %>% highlight_tb_count()
tb_lasso %>% highlight_tb_percent()
r = rep(0, 5)
r
t = lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda)
table(factor(Y_pred, levels = levels(factor(Y))), factor(Y_test))
}) %>%
Reduce("+",.) %>%
as.matrix()
knitr::opts_chunk$set(
fig.align = "center",
fig.pos = "H",
fig.width = 5,
fig.height = 3,
message = FALSE,
warning = FALSE,
external = TRUE,
echo = TRUE
)
library(tidyverse)
library(magrittr)
library(ggsci)
library(kableExtra)
source("../R script/functions.R")
# load raw data files
data <- read.csv("../data/filledDatabase111119NUMONLY.csv")
# clean data
data <- clean_data(data) %>% collapse_data()
# separate compound and group_cate from the predictors
compound <- data$Compound
group_cat <- data$GroupCat
# create data constructed by first 13 PC's
data <- select(data, -c("Compound","X"))
data_pca <- get_pc_space(data[,-1], k = 13) %>% scale() %>% data.frame() %>% bind_cols(GroupCat=group_cat)
# split data into 5 folds for cross validation later
folds <- caret::createFolds(1:nrow(data), k = 5, list = TRUE, returnTrain = FALSE)
library(glmnet)
X = data[,-1] %>% as.matrix()
Y = data$GroupCat %>% as.matrix()
model_ridge <- glmnet(x = X, y = Y, alpha = 0, family = "multinomial")
plot(model_ridge, xvar = "lambda", label = TRUE)
model_lasso <- glmnet(x = X, y = Y, alpha = 1, family = "multinomial")
plot(model_lasso, xvar = "lambda", label = TRUE)
ridge_cv <- cv.glmnet(x = X, y = Y, alpha = 0, nfolds = 5, type.measure = "deviance", family = "multinomial")
ridge_cv %>% get_coef() %>% plot_coef()
lasso_cv <- cv.glmnet(x = X, y = Y, alpha = 1, nfolds = 5, type.measure = "deviance", family = "multinomial")
lasso_cv %>% get_coef() %>% plot_coef()
r = rep(0, 5)
t = lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda)
table(factor(Y_pred, levels = levels(factor(Y))), factor(Y_test))
}) %>%
Reduce("+",.) %>%
as.matrix()
alpha = 0
lambda = ridge_cv$lambda.min
t = lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda)
table(factor(Y_pred, levels = levels(factor(Y))), factor(Y_test))
}) %>%
Reduce("+",.) %>%
as.matrix()
r = rep(0, 5)
t = lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda)
table(factor(Y_pred, levels = levels(factor(Y))), factor(Y_test))
})
t
lapply(t, function(x) mean(x))
lapply(t, function(x) sum(diag(x))/sum(x))
lapply(t, function(x) sum(diag(x))/sum(x)) %>% unlist()
prediction_table <- function(alpha, lambda){
t = lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda)
table(factor(Y_pred, levels = levels(factor(Y))), factor(Y_test))
})
r = lapply(t, function(x) sum(diag(x))/sum(x)) %>% unlist()
t = Reduce("+",t) %>% as.matrix()
return(r, t)
}
prediction_table <- function(alpha, lambda){
t = lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda)
table(factor(Y_pred, levels = levels(factor(Y))), factor(Y_test))
})
r = lapply(t, function(x) sum(diag(x))/sum(x)) %>% unlist()
t = Reduce("+",t) %>% as.matrix()
return(r, t)
}
tb_ridge = prediction_table(alpha = 0, lambda = ridge_cv$lambda.min)
prediction_table <- function(alpha, lambda){
t = lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda)
table(factor(Y_pred, levels = levels(factor(Y))), factor(Y_test))
})
r = lapply(t, function(x) sum(diag(x))/sum(x)) %>% unlist()
t = Reduce("+",t) %>% as.matrix()
return(list(r, t))
}
tb_ridge = prediction_table(alpha = 0, lambda = ridge_cv$lambda.min)
tb_ridge$r;
r
t = lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda)
table(factor(Y_pred, levels = levels(factor(Y))), factor(Y_test))
})
r = lapply(t, function(x) sum(diag(x))/sum(x)) %>% unlist()
r
t = Reduce("+",t) %>% as.matrix()
list(r, t)
list(r=r, t=t)
prediction_table <- function(alpha, lambda){
t = lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model_lasso = glmnet(x = X_train, y = Y_train, alpha = alpha, family = "multinomial")
Y_pred = predict(model_lasso, newx = X_test, type = "class", s = lambda)
table(factor(Y_pred, levels = levels(factor(Y))), factor(Y_test))
})
r = lapply(t, function(x) sum(diag(x))/sum(x)) %>% unlist()
t = Reduce("+",t) %>% as.matrix()
return(list(r=r, t=t))
}
tb_ridge = prediction_table(alpha = 0, lambda = ridge_cv$lambda.min)
tb_ridge$r
tb_ridge$t %>% highlight_tb_count()
tb_ridge$t %>% highlight_tb_percent()
tb_ridge$r
tb_ridge$r; mean(tb_ridge$r)
data.frame(tb_ridge$r, average = mean(tb_ridge$r))
t(tb_ridge$r) %>% data.frame()
t(tb_ridge$r) %>% data.frame() %>% cbind(Mean = mena(tb_ridge$r))
t(tb_ridge$r) %>% data.frame() %>% cbind(Mean = mean(tb_ridge$r))
t(tb_ridge$r) %>% data.frame() %>% cbind(Mean = mean(tb_ridge$r)) %>% kable()
print_accurate_tb <- function(r){
t(r) %>% data.frame() %>% cbind(Mean = mean(r)) %>% kable(escape = F, booktabs = T) %>% kable_styling()
}
tb_ridge$r %>% print_accurate_tb()
