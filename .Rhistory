type = 'scatter3d', mode = 'markers',
marker = list(
color = ~Cluster,
colors = "Paired",
line = list(
colors = I('black'),
width = 1
)
),
opacity = 0.8
)
data.frame(
Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X[,top3]
) %>%
plot_ly() %>%
add_trace(
x = ~ToleranceBVP,
y = ~IonizationPotentialofA,
z = ~CrystalRadiusofA,
text = ~Compound,
type = 'scatter3d', mode = 'markers',
marker = list(
color = ~Cluster,
colors = "Paired",
line = list(
width = 1
)
),
opacity = 0.8
)
dim
dim(subset)
df_plot <- data.frame(
Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X[,top3],
tag = c(rep('correct',200), rep('wrong',69))
)
df_plot <- data.frame(
Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X[,top3],
tag = c(rep('correct',200), rep('wrong',83))
)
plot_ly() %>%
add_trace(
data = df_plot %>% filter(tag == 'correct'),
x = ~ToleranceBVP,
y = ~IonizationPotentialofA,
z = ~CrystalRadiusofA,
color = ~Cluster,
text = ~Compound,
type = 'scatter3d', mode = 'markers',
marker = list(
colors = "Paired",
line = list(
width = 1
)
),
opacity = 0.8
)
plot_ly() %>%
add_trace(
data = df_plot %>% filter(tag == 'correct'),
x = ~ToleranceBVP,
y = ~IonizationPotentialofA,
z = ~CrystalRadiusofA,
color = ~Cluster,
text = ~Compound,
type = 'scatter3d', mode = 'markers',
marker = list(
color = "black",
line = list(
width = 1
)
),
opacity = 0.8
)
plot_ly() %>%
add_trace(
data = df_plot %>% filter(tag == 'correct'),
x = ~ToleranceBVP,
y = ~IonizationPotentialofA,
z = ~CrystalRadiusofA,
color = ~Cluster,
text = ~Compound,
type = 'scatter3d', mode = 'markers',
marker = list(line = list(color = "black", width = 1)),
opacity = 0.8
)
plot_ly() %>%
add_trace(
data = df_plot %>% filter(tag == 'correct'),
x = ~ToleranceBVP,
y = ~IonizationPotentialofA,
z = ~CrystalRadiusofA,
color = ~Cluster,
text = ~Compound,
type = 'scatter3d', mode = 'markers',
marker = list(line = list(color = "black", width = 1)),
opacity = 0.8
) %>%
add_trace(
data = df_plot %>% filter(tag == 'wrong'),
x = ~ToleranceBVP,
y = ~IonizationPotentialofA,
z = ~CrystalRadiusofA,
color = ~Cluster,
text = ~Compound,
type = 'scatter3d', mode = 'markers',
marker = list(line = list(color = "red", width = 1)),
opacity = 0.8
)
plot_ly() %>%
add_trace(
data = df_plot %>% filter(tag == 'correct'),
x = ~ToleranceBVP,
y = ~IonizationPotentialofA,
z = ~CrystalRadiusofA,
color = ~Cluster,
text = ~Compound,
type = 'scatter3d', mode = 'markers',
opacity = 0.8
) %>%
add_trace(
data = df_plot %>% filter(tag == 'wrong'),
x = ~ToleranceBVP,
y = ~IonizationPotentialofA,
z = ~CrystalRadiusofA,
color = ~Cluster,
text = ~Compound,
type = 'scatter3d', mode = 'markers',
marker = list(line = list(color = "red", width = 1)),
opacity = 0.8
)
plot_ly() %>%
add_trace(
data = df_plot %>% filter(tag == 'correct'),
x = ~ToleranceBVP,
y = ~IonizationPotentialofA,
z = ~CrystalRadiusofA,
color = ~Cluster,
text = ~Compound,
type = 'scatter3d', mode = 'markers',
opacity = 0.8
) %>%
add_trace(
data = df_plot %>% filter(tag == 'wrong'),
x = ~ToleranceBVP,
y = ~IonizationPotentialofA,
z = ~CrystalRadiusofA,
color = ~Cluster,
text = ~Compound,
type = 'scatter3d', mode = 'markers',
marker = list(line = list(color = "red", width = 2)),
opacity = 0.8
)
plot_ly() %>%
add_trace(
data = df_plot %>% filter(tag == 'correct'),
x = ~ToleranceBVP,
y = ~IonizationPotentialofA,
z = ~CrystalRadiusofA,
color = ~Cluster,
text = ~Compound,
type = 'scatter3d', mode = 'markers',
opacity = 0.8
) %>%
add_trace(
data = df_plot %>% filter(tag == 'wrong'),
x = ~ToleranceBVP,
y = ~IonizationPotentialofA,
z = ~CrystalRadiusofA,
color = ~Cluster,
text = ~Compound,
type = 'scatter3d', mode = 'markers',
marker = list(line = list(color = "red", width = 2, opacity = 0.5)),
opacity = 0.8
)
confusionMatrix(model2)
gbm_cv <- gbm(GroupCat~., data = subset2[,-c(1:3)],
shrinkage = 0.01, distribution = "multinomial",
cv.folds = 5, n.trees = 3000, verbose = F)
best.iter = gbm.perf(gbm_cv, method="cv")
fitControl = trainControl(method = "cv", number = 5, returnResamp = "all")
model2 = train(GroupCat~., data = subset2[,-c(1:3)],
method = "gbm",
distribution = "multinomial",
trControl = fitControl, verbose = F,
tuneGrid = data.frame(.n.trees = best.iter,
.shrinkage = 0.01,
.interaction.depth = 1,
.n.minobsinnode = 1))
model2
summary(model2)
confusionMatrix(model2)
gbm_cv
summary(model2)
summary(model2) %>% unclass()
folds
#### -------------   section 3: what we predict it wrong   ------------- ####
Y_pred = Y
X_test = X[id,]; X_train = X[-id,]
#### -------------   section 3: what we predict it wrong   ------------- ####
Y_pred = Y
lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model = gbm(GroupCat~., data = data.frame(X_train, Y_train),
shrinkage = 0.01, distribution = "multinomial",
n.trees = 3000, verbose = F, train.fraction = 1)
Y_pred[id] = predict(model, newx = X_test, type = "class", s = lambda)
})
head(Y_pred)
top3 <- c("ToleranceBVP", "IonizationPotentialofA", "CrystalRadiusofA")
X <- subset[,-c(1:4)] %>% remove_identical_cal() %>% as.matrix()
df_plot <-
data.frame(
Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X[,top3],
tag = ifelse(Y_pred == Y, 'correct', 'wrong')
)
#### -------------   section 3: what we predict it wrong   ------------- ####
Y_pred = Y
lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model = gbm(GroupCat~., data = data.frame(X_train, Y_train),
shrinkage = 0.01, distribution = "multinomial",
n.trees = 3000, verbose = F, train.fraction = 1)
Y_pred[id] = predict(model, newx = X_test, type = "class", s = lambda)
})
subset2 <- data %>%
filter(X == "O") %>%
filter(GroupCat != "NCOT") %>%
droplevels()
X <- subset2[,-c(1:4)] %>% remove_identical_cal() %>% as.matrix()
Y <- subset2$GroupCat %>% droplevels() %>% as.matrix()
#### -------------   section 3: what we predict it wrong   ------------- ####
Y_pred = Y
lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model = gbm(GroupCat~., data = data.frame(X_train, Y_train),
shrinkage = 0.01, distribution = "multinomial",
n.trees = 3000, verbose = F, train.fraction = 1)
Y_pred[id] = predict(model, newx = X_test, type = "class", s = lambda)
})
model = gbm(GroupCat~., data = data.frame(X_train, GroupCat = Y_train),
shrinkage = 0.01, distribution = "multinomial",
n.trees = 3000, verbose = F, train.fraction = 1)
#### -------------   section 3: what we predict it wrong   ------------- ####
Y_pred = Y
lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model = gbm(GroupCat~., data = data.frame(X_train, GroupCat = Y_train),
shrinkage = 0.01, distribution = "multinomial",
n.trees = 3000, verbose = F, train.fraction = 1)
Y_pred[id] = predict(model, newx = X_test, type = "class", s = lambda)
})
gbm.perf(model2)
gbm_cv <- gbm(GroupCat~., data = subset2[,-c(1:3)],
shrinkage = 0.01, distribution = "multinomial",
cv.folds = 5, n.trees = 3000, verbose = F)
gbm.perf(gbm_cv)
predict(gbm_cv)
#### -------------   section 3: what we predict it wrong   ------------- ####
Y_pred = Y
lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model = gbm(GroupCat~., data = data.frame(X_train, GroupCat = Y_train),
shrinkage = 0.01, distribution = "multinomial",
n.trees = 3000, verbose = F, train.fraction = 1)
Y_pred[id] = predict(model, newdata = X_test, type = "response")
})
#### -------------   section 3: what we predict it wrong   ------------- ####
Y_pred = Y
lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model = gbm(GroupCat~., data = data.frame(X_train, GroupCat = Y_train),
shrinkage = 0.01, distribution = "multinomial",
n.trees = 3000, verbose = F, train.fraction = 1)
Y_pred[id] = predict(model, n.trees = 3000, newdata = X_test, type = "response")
})
#### -------------   section 3: what we predict it wrong   ------------- ####
Y_pred = Y
lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model = gbm(GroupCat~., data = data.frame(X_train, GroupCat = Y_train),
shrinkage = 0.01, distribution = "multinomial",
n.trees = 3000, verbose = F, train.fraction = 1)
Y_pred[id] = predict(model, n.trees = 3000, newdata = as.data.frame(X_test), type = "response")
})
Y_class <- apply(Y_pred, 1, which.max)
head(Y_class)
head(Y_pred)
#### -------------   section 3: what we predict it wrong   ------------- ####
Y_pred = Y
lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model = gbm(GroupCat~., data = data.frame(X_train, GroupCat = Y_train),
shrinkage = 0.01, distribution = "multinomial",
n.trees = 3000, verbose = F, train.fraction = 1)
Y_pred[id] = predict(model, n.trees = 3000, newdata = as.data.frame(X_test), type = "response")
})
head(Y_pred)
head(Y)
mean(Y_pred == Y)
#### -------------   section 3: what we predict it wrong   ------------- ####
Y_pred = Y
lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model = gbm(GroupCat~., data = data.frame(X_train, GroupCat = Y_train),
shrinkage = 0.01, distribution = "multinomial",
n.trees = 3000, verbose = F, train.fraction = 1)
Y_pred[id] = predict(model, n.trees = 3000, newdata = as.data.frame(X_test), type = "response")
})
#### -------------   section 3: what we predict it wrong   ------------- ####
Y_pred = Y
lapply(folds, function(id) {
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model = gbm(GroupCat~., data = data.frame(X_train, GroupCat = Y_train),
shrinkage = 0.01, distribution = "multinomial",
n.trees = 3000, verbose = F, train.fraction = 1)
Y_pred[id] = predict(model, n.trees = 3000, newdata = as.data.frame(X_test), type = "response") %>%
apply(., 1, which.max)
})
View(Y_pred)
length(folds)
folds[[1]]
for(i in 1:length(folds)){
id = folds[[i]]
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model = gbm(GroupCat~., data = data.frame(X_train, GroupCat = Y_train),
shrinkage = 0.01, distribution = "multinomial",
n.trees = 3000, verbose = F, train.fraction = 1)
Y_pred[id] = predict(model, n.trees = 3000, newdata = as.data.frame(X_test), type = "response") %>%
apply(., 1, which.max)
}
Y_pred = Y
for(i in 1:length(folds)){
id = folds[[i]]
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model = gbm(GroupCat~., data = data.frame(X_train, GroupCat = Y_train),
shrinkage = 0.01, distribution = "multinomial",
n.trees = 3000, verbose = F, train.fraction = 1)
Y_pred[id] = predict(model, n.trees = 3000, newdata = as.data.frame(X_test), type = "response")
}
View(Y)
Y_pred = Y
for(i in 1:length(folds)){
id = folds[[i]]
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model = gbm(GroupCat~., data = data.frame(X_train, GroupCat = Y_train),
shrinkage = 0.01, distribution = "multinomial",
n.trees = 3000, verbose = F, train.fraction = 1)
Y_pred[id] = predict(model, n.trees = 3000, newdata = as.data.frame(X_test), type = "response") %>%
apply(., 1, which.max)
}
predict(model, n.trees = 3000, newdata = as.data.frame(X_test), type = "response")
Y_pred = recode(Y_pred,
1 = "Cubic",
2 = "Hexagonal",
3 = "LiNb03",
4 = "NCOT"))
Y_pred = recode(Y_pred,
1 = "Cubic",
2 = "Hexagonal",
3 = "LiNb03",
4 = "NCOT")
Y_pred = recode(Y_pred,
1 = "Cubic",
2 = "Hexagonal",
3 = "LiNb03",
4 = "NCOT")
Y_pred = recode(Y_pred,
"1" = "Cubic",
"2" = "Hexagonal",
"3" = "LiNb03",
"4" = "NCOT")
mean(Y == Y_pred)
Y_pred = Y
i = 1
id = folds[[i]]
id
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model = gbm(GroupCat~., data = data.frame(X_train, GroupCat = Y_train),
shrinkage = 0.01, distribution = "multinomial",
n.trees = 3000, verbose = F, train.fraction = 1)
predict(model, n.trees = 3000, newdata = as.data.frame(X_test), type = "response")
predict(model, n.trees = 3000, newdata = as.data.frame(X_test), type = "response") %>%
apply(., 1, which.max)
Y_pred = Y
for(i in 1:length(folds)){
id = folds[[i]]
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model = gbm(GroupCat~., data = data.frame(X_train, GroupCat = Y_train),
shrinkage = 0.01, distribution = "multinomial",
n.trees = 3000, verbose = F, train.fraction = 1)
Y_pred[id] = predict(model, n.trees = 3000, newdata = as.data.frame(X_test), type = "response") %>%
apply(., 1, which.max)
}
Y_pred = recode(Y_pred,
"1" = "Cubic",
"2" = "Hexagonal",
"3" = "LiNb03",
"4" = "NCOT")
Y_pred = Y
for(i in 1:length(folds)){
id = folds[[i]]
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model = gbm(GroupCat~., data = data.frame(X_train, GroupCat = Y_train),
shrinkage = 0.01, distribution = "multinomial",
n.trees = 3000, verbose = F, train.fraction = 1)
Y_pred[id] = predict(model, n.trees = 3000, newdata = as.data.frame(X_test), type = "response") %>%
apply(., 1, which.max)
}
Y_pred = recode(Y_pred,
"1" = "Cubic",
"2" = "Hexagonal",
"3" = "LiNb03",
"4" = "Tilted")
mean(Y == Y_pred)
confusionMatrix(model2)$table
confusionMatrix(model2)
summary(gbm_cv)
summary(model2)
top3 <- c("ToleranceBVP", "IonizationPotentialofA", "CrystalRadiusofA")
X <- subset[,-c(1:4)] %>% remove_identical_cal() %>% as.matrix()
df_plot <-
data.frame(
Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X[,top3],
tag = ifelse(Y_pred == Y, 'correct', 'wrong')
)
subset2 <- data %>%
filter(X == "O") %>%
filter(GroupCat != "NCOT") %>%
droplevels()
X <- subset2[,-c(1:4)] %>% remove_identical_cal() %>% as.matrix()
Y <- subset2$GroupCat %>% droplevels() %>% as.matrix()
set.seed(2020)
folds <- createFolds(1:nrow(X), k = 5, list = TRUE, returnTrain = FALSE)
lasso_cv = cv.glmnet(x = X, y = Y, alpha = 1,
nfolds = 5,
type.measure = "deviance",
family = "multinomial")
tb_lasso = prediction_table(alpha = 1, lambda = lasso_cv$lambda.min)
tb_lasso$r %>% print_accurate_tb()
Y_pred = Y
for(i in 1:length(folds)){
id = folds[[i]]
X_test = X[id,]; X_train = X[-id,]
Y_test = Y[id]; Y_train = Y[-id]
model = gbm(GroupCat~., data = data.frame(X_train, GroupCat = Y_train),
shrinkage = 0.01, distribution = "multinomial",
n.trees = 3000, verbose = F, train.fraction = 1)
Y_pred[id] = predict(model, n.trees = 3000, newdata = as.data.frame(X_test), type = "response") %>%
apply(., 1, which.max)
}
Y_pred = recode(Y_pred,
"1" = "Cubic",
"2" = "Hexagonal",
"3" = "LiNb03",
"4" = "Tilted")
top3 <- c("ToleranceBVP", "IonizationPotentialofA", "CrystalRadiusofA")
df_plot <-
data.frame(
Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X[,top3],
tag = ifelse(Y_pred == Y, 'correct', 'wrong')
)
plot_ly() %>%
add_trace(
data = df_plot %>% filter(tag == 'correct'),
x = ~ToleranceBVP,
y = ~IonizationPotentialofA,
z = ~CrystalRadiusofA,
color = ~Cluster,
text = ~Compound,
type = 'scatter3d', mode = 'markers',
opacity = 0.8
) %>%
add_trace(
data = df_plot %>% filter(tag == 'wrong'),
x = ~ToleranceBVP,
y = ~IonizationPotentialofA,
z = ~CrystalRadiusofA,
color = ~Cluster,
text = ~Compound,
type = 'scatter3d', mode = 'markers',
marker = list(line = list(color = "red", width = 2, opacity = 0.5)),
opacity = 0.8
)
