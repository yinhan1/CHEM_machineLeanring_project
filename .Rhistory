collapse_data <- function(data){
data %>%
mutate(GroupCat = fct_other(factor(GroupCat), keep = c(3,5,6), other_level = 'Others'),
GroupCat = factor(GroupCat,
levels = c("3","5","6","Others"),
labels = c("Cubic","Tilted","Hexagonal","Others")))
}
# load raw data files
# data <- read.csv("../data/filledDatabase.csv")[,-c(2:9,11:13)]
data <- read.csv("../data/filledDatabaseNUMONLY_042620.csv")
# clean data
data <- clean_data(data) %>% collapse_data()
# separate compound and group_cate from the predictors
compound <- data$Compound
group_cat <- data$GroupCat
# prepare date for modeling
data <- select(data, -c("Compound"))
X = data[,-c(1,2)] %>% remove_identical_cal() %>% as.matrix()
Y = data$GroupCat %>% as.matrix()
ridge_cv <- cv.glmnet(x = X, y = Y, alpha = 0, nfolds = 5, type.measure = "deviance", family = "multinomial")
tb =
ridge_cv %>%
get_coef(tuning_parameter = ridge_cv$lambda.min) %>%
select(feature, Cubic, Tilted, Hexagonal, Others) %>%
filter(feature != "(Intercept)") %>%
mutate(tag = rep(c(1,2), c(33,32)))
ridge_cv %>%
get_coef(tuning_parameter = ridge_cv$lambda.min) %>%
select(feature, Cubic, Tilted, Hexagonal, Others) %>%
filter(feature != "(Intercept)")
tb =
ridge_cv %>%
get_coef(tuning_parameter = ridge_cv$lambda.min) %>%
select(feature, Cubic, Tilted, Hexagonal, Others) %>%
filter(feature != "(Intercept)") %>%
mutate(tag = rep(c(1,2), c(32,32)))
tb %>% filter(tag == 2) %>% select(-tag) %>% plot_coef()
tb %>% filter(tag == 1) %>% select(-tag) %>% plot_coef()
lasso_cv <- cv.glmnet(x = X, y = Y, alpha = 1, nfolds = 5, type.measure = "deviance", family = "multinomial")
tb =
lasso_cv %>%
get_coef(tuning_parameter = lasso_cv$lambda.min) %>%
select(feature, Cubic, Tilted, Hexagonal, Others) %>%
filter(feature != "(Intercept)") %>%
mutate(tag = rep(c(1,2), c(32,32)))
elastic_cv <-
train(GroupCat ~., data = data.frame(X,GroupCat=Y), method = "glmnet",
trControl = trainControl("cv", number = 5),
tuneLength = 10)
tb =
elastic_cv$finalModel %>%
get_coef(tuning_parameter = elastic_cv$bestTune$lambda) %>%
select(feature, Cubic, Tilted, Hexagonal, Others) %>%
filter(feature != "(Intercept)") %>%
mutate(tag = rep(c(1,2), c(32,32)))
tb %>% filter(tag == 2) %>% select(-tag) %>% plot_coef()
tb %>% filter(tag == 1) %>% select(-tag) %>% plot_coef()
folds = createFolds(1:nrow(X), k = 5, list = TRUE, returnTrain = FALSE)
tb_ridge = prediction_table(alpha = 0, lambda = ridge_cv$lambda.min)
tb_ridge$r %>% print_accurate_tb()
tb_ridge$t %>% highlight_tb_count()
tb_ridge$t %>% highlight_tb_percent()
tb_lasso = prediction_table(alpha = 1, lambda = lasso_cv$lambda.min)
tb_lasso$r %>% print_accurate_tb()
tb_lasso$t %>% highlight_tb_count()
tb_lasso$t %>% highlight_tb_percent()
tb_elastic = prediction_table(alpha = elastic_cv$bestTune[[1]], lambda = elastic_cv$bestTune[[2]])
tb_elastic$r %>% print_accurate_tb()
tb_elastic$t %>% highlight_tb_count()
tb_elastic$t %>% highlight_tb_percent()
View(data)
# load raw data files
# data <- read.csv("../data/filledDatabase.csv")[,-c(2:9,11:13)]
data <- read.csv("../data/filledDatabaseNUMONLY_042620.csv")
# clean data
data <- clean_data(data) %>% collapse_data()
# separate compound and group_cate from the predictors
compound <- data$Compound
group_cat <- data$GroupCat
# prepare date for modeling
data <- select(data, -c("Compound"))
# load raw data files
# data <- read.csv("../data/filledDatabase.csv")[,-c(2:9,11:13)]
data <- read.csv("../data/filledDatabaseNUMONLY_042620.csv")
View(data)
knitr::opts_chunk$set(
fig.align = "center",
fig.pos = "H",
fig.width = 5,
fig.height = 3,
message = FALSE,
warning = FALSE,
external = TRUE,
echo = TRUE
)
library(tidyverse)
library(magrittr)
library(ggsci)
library(kableExtra)
source("../scripts/functions.R")
# load raw data files
# data <- read.csv("../data/filledDatabase.csv")[,-c(2:9,11:13)]
data <- read.csv("../data/filledDatabaseNUMONLY_042620.csv")
# clean data
data <- clean_data(data) %>% collapse_data()
# separate compound and group_cate from the predictors
compound <- data$Compound
group_cat <- data$GroupCat
# prepare date for modeling
data <- select(data, -c("Compound"))
# data_pca <- get_pc_space(data[,-1], k = 13) %>% scale() %>% data.frame()
# split data into 5 folds for cross validation later
folds <- caret::createFolds(1:nrow(data), k = 5, list = TRUE, returnTrain = FALSE)
# load raw data files
# data <- read.csv("../data/filledDatabase.csv")[,-c(2:9,11:13)]
data <- read.csv("../data/filledDatabaseNUMONLY_042620.csv")
data <- clean_data(data)
# clean data
data <-
clean_data(data) %>%
mutate(GroupCat = recode(GroupCat,
"LiNbO3"=2))
# clean data
data <-
clean_data(data) %>%
mutate(GroupCat = recode(GroupCat,
"LiNbO3"="2"))
# load raw data files
# data <- read.csv("../data/filledDatabase.csv")[,-c(2:9,11:13)]
data <- read.csv("../data/filledDatabaseNUMONLY_042620.csv")
# clean data
data <-
clean_data(data) %>%
mutate(GroupCat = recode(GroupCat,
"LiNbO3"="2"))
# clean data
data <-
clean_data(data) %>%
mutate(GroupCat = recode(GroupCat,
2 = "LiNbO3"))
# load raw data files
# data <- read.csv("../data/filledDatabase.csv")[,-c(2:9,11:13)]
data <- read.csv("../data/filledDatabaseNUMONLY_042620.csv")
# clean data
data <-
clean_data(data) %>%
mutate(GroupCat = recode(GroupCat,
2 = "LiNbO3"))
# clean data
data <-
clean_data(data) %>%
mutate(GroupCat = recode(GroupCat,
"2" = "LiNbO3"))
# load raw data files
# data <- read.csv("../data/filledDatabase.csv")[,-c(2:9,11:13)]
data <- read.csv("../data/filledDatabaseNUMONLY_042620.csv")
# load raw data files
# data <- read.csv("../data/filledDatabase.csv")[,-c(2:9,11:13)]
data <- read.csv("../data/filledDatabaseNUMONLY_042620.csv")
table(data$GroupCat)
# clean data
data <-
clean_data(data) %>%
filter(!(GroupCat %in% c(3,5,6)))
# load raw data files
# data <- read.csv("../data/filledDatabase.csv")[,-c(2:9,11:13)]
data <- read.csv("../data/filledDatabaseNUMONLY_042620.csv")
# clean data
data <- clean_data(data) %>% filter(!(GroupCat %in% c(3,5,6)))
# separate compound and group_cate from the predictors
compound <- data$Compound
group_cat <- data$GroupCat
# prepare date for modeling
data <- select(data, -c("Compound"))
# split data into 5 folds for cross validation later
folds <- caret::createFolds(1:nrow(data), k = 5, list = TRUE, returnTrain = FALSE)
library(glmnet)
X = data[,-1] %>% as.matrix()
Y = data$GroupCat %>% as.matrix()
model_ridge <- glmnet(x = X, y = Y, alpha = 0, family = "multinomial")
View(data)
knitr::opts_chunk$set(
fig.align = "center",
fig.pos = "H",
fig.width = 5,
fig.height = 3,
message = FALSE,
warning = FALSE,
external = TRUE,
echo = TRUE
)
library(tidyverse)
library(magrittr)
library(ggsci)
library(kableExtra)
source("../scripts/functions.R")
# load raw data files
# data <- read.csv("../data/filledDatabase.csv")[,-c(2:9,11:13)]
data <- read.csv("../data/filledDatabaseNUMONLY_042620.csv")
# clean data
data <- clean_data(data) %>% filter(!(GroupCat %in% c(3,5,6)))
# separate compound and group_cate from the predictors
compound <- data$Compound
group_cat <- data$GroupCat
# prepare date for modeling
data <- select(data, -c("Compound"))
# data_pca <- get_pc_space(data[,-1], k = 13) %>% scale() %>% data.frame()
# split data into 5 folds for cross validation later
folds <- caret::createFolds(1:nrow(data), k = 5, list = TRUE, returnTrain = FALSE)
library(glmnet)
X = data[,-1] %>% as.matrix()
Y = data$GroupCat %>% as.matrix()
model_ridge <- glmnet(x = X, y = Y, alpha = 0, family = "multinomial")
table(data$GroupCat)
# clean data
data <- clean_data(data) %>% filter(!(GroupCat %in% c(3,5,6))) %>%
mutate(GroupCat = ifelse(!(GroupCat %in% c(2,16)), "Others", GroupCat))
# clean data
data <- clean_data(data) %>% filter(!(GroupCat %in% c(3,5,6))) %>%
mutate(GroupCat = ifelse(!(GroupCat %in% c(2,16)), "Others", GroupCat))
# load raw data files
# data <- read.csv("../data/filledDatabase.csv")[,-c(2:9,11:13)]
data <- read.csv("../data/filledDatabaseNUMONLY_042620.csv")
# clean data
data <- clean_data(data) %>% filter(!(GroupCat %in% c(3,5,6))) %>%
mutate(GroupCat = ifelse(!(GroupCat %in% c(2,16)), "Others", GroupCat))
# EDA
data <-
read.csv("../data/filledDatabaseNUMONLY_042620.csv") %>%
clean_data() %>%
filter(!(GroupCat %in% c(3,5,6))) %>%
mutate(GroupCat = ifelse(!(GroupCat %in% c(2,16)), "Others", GroupCat))
# EDA
data <-
read.csv("../data/filledDatabaseNUMONLY_042620.csv") %>%
clean_data() %>%
filter(!(GroupCat %in% c(3,5,6))) %>%
mutate(GroupCat = ifelse(!(GroupCat %in% c(2,16)), "Others", GroupCat))
X = data[,-1] %>% as.matrix()
prcomp(X, scale = TRUE)
# EDA
data <-
read.csv("../data/filledDatabaseNUMONLY_042620.csv") %>%
clean_data() %>%
filter(!(GroupCat %in% c(3,5,6))) %>%
mutate(GroupCat = ifelse(!(GroupCat %in% c(2,16)), "Others", GroupCat))
X = data[,-1] %>% as.matrix()
Y = data$GroupCat %>% as.matrix()
prcomp(X, scale = TRUE)
View(X)
X = data[,-c(1,2)] %>% as.matrix()
Y = data$GroupCat %>% as.matrix()
summary(X)
prcomp(X, scale = TRUE)
pca = prcomp(X, scale = TRUE)
biplot(pca)
pca = prcomp(X, scale = TRUE)
biplot(pca)
library("factoextra")
fviz_pca_var(pca, col.var = "black")
fviz_pca_var(pca, col.var="contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
fviz_contrib(pca, choice = "var", axes = 1, top = 10)
library("factoextra")
# EDA
data <-
read.csv("../data/filledDatabaseNUMONLY_042620.csv") %>%
clean_data() %>%
filter(!(GroupCat %in% c(3,5,6))) %>%
mutate(GroupCat = ifelse(!(GroupCat %in% c(2,16)), "Others", GroupCat))
X = data[,-c(1,2)] %>% as.matrix()
Y = data$GroupCat %>% as.matrix()
pca = prcomp(X, scale = TRUE)
fviz_contrib(pca, choice = "var", axes = 1, top = 10)
fviz_contrib(pca, choice = "var", axes = 2, top = 10)
pca$sdev
summary(pca)
library("factoextra")
# EDA
data <-
read.csv("../data/filledDatabaseNUMONLY_042620.csv") %>%
clean_data() %>%
filter(!(GroupCat %in% c(3,5,6))) %>%
mutate(GroupCat = ifelse(!(GroupCat %in% c(2,16)), "Others", GroupCat))
X = data[,-c(1,2)] %>% as.matrix()
Y = data$GroupCat %>% as.matrix()
pca = prcomp(X, scale = TRUE)
hclust(X, method= "complete")
tree = hclust(X, method= "complete")
tree = hclust(dist(X), method= "complete")
plot(tree)
View(data)
# EDA
data <-
read.csv("../data/filledDatabaseNUMONLY_042620.csv") %>%
clean_data() %>%
filter(!(GroupCat %in% c(3,5,6)))
# EDA
data <-
read.csv("../data/filledDatabaseNUMONLY_042620.csv") %>%
clean_data() %>%
filter(!(GroupCat %in% c(3,5,6)))
X = data[,-c(1,2)] %>% as.matrix()
Y = data$GroupCat %>% as.matrix()
rownames(X) = paste0(data$GroupCat, "_", nrow(data))
tree = hclust(dist(X), method= "complete")
plot(tree)
cut_off <- 4
myCluster <- cutree(tree, cut_off)
# plot dendrogram
fviz_dend(hc,
k = cut_off,
cex = 0.5,
k_colors = "jco",
color_labels_by_k = FALSE,
horiz = TRUE,
ggtheme = theme_minimal(),
main = ""
)
library(ggsci)
tree = hclust(dist(X), method= "complete")
cut_off <- 4
myCluster <- cutree(tree, cut_off)
# plot dendrogram
fviz_dend(hc,
k = cut_off,
cex = 0.5,
k_colors = "jco",
color_labels_by_k = FALSE,
horiz = TRUE,
ggtheme = theme_minimal(),
main = ""
)
# plot dendrogram
fviz_dend(tree,
k = cut_off,
cex = 0.5,
k_colors = "jco",
color_labels_by_k = FALSE,
horiz = TRUE,
ggtheme = theme_minimal(),
main = ""
)
fviz_nbclust(X, FUN = hcut, method = "wss")
library("factoextra")
library(ggsci)
# EDA
data <-
read.csv("../data/filledDatabaseNUMONLY_042620.csv") %>%
clean_data() %>%
filter(!(GroupCat %in% c(3,5,6)))
X = data[,-c(1,2)] %>% as.matrix()
Y = data$GroupCat %>% as.matrix()
rownames(X) = paste0(data$GroupCat, "_", nrow(data))
fviz_nbclust(X, FUN = hcut, method = "wss")
library("factoextra")
library(ggsci)
# EDA
data <-
read.csv("../data/filledDatabaseNUMONLY_042620.csv") %>%
clean_data() %>%
filter(!(GroupCat %in% c(3,5,6)))
X = data[,-c(1,2)] %>% as.matrix()
Y = data$GroupCat %>% as.matrix()
rownames(X) = paste0(data$GroupCat, "_", c(1:nrow(data)))
fviz_nbclust(X, FUN = hcut, method = "wss")
tree = hclust(dist(X), method= "complete")
cut_off <- 5
myCluster <- cutree(tree, cut_off)
# plot dendrogram
fviz_dend(tree,
k = cut_off,
cex = 0.5,
k_colors = "jco",
color_labels_by_k = FALSE,
horiz = TRUE,
ggtheme = theme_minimal(),
main = ""
)
tree = hclust(dist(X), method= "average")
cut_off <- 5
myCluster <- cutree(tree, cut_off)
# plot dendrogram
fviz_dend(tree,
k = cut_off,
cex = 0.5,
k_colors = "jco",
color_labels_by_k = FALSE,
horiz = TRUE,
ggtheme = theme_minimal(),
main = ""
)
myCluster
table(myCluster, data$GroupCat)
tree = hclust(dist(X), method= "average")
cut_off <- 8
myCluster <- cutree(tree, cut_off)
# plot dendrogram
fviz_dend(tree,
k = cut_off,
cex = 0.5,
k_colors = "jco",
color_labels_by_k = FALSE,
horiz = TRUE,
ggtheme = theme_minimal(),
main = ""
)
table(myCluster, data$GroupCat)
tree = hclust(dist(X), method= "single")
cut_off <- 8
myCluster <- cutree(tree, cut_off)
# plot dendrogram
fviz_dend(tree,
k = cut_off,
cex = 0.5,
k_colors = "jco",
color_labels_by_k = FALSE,
horiz = TRUE,
ggtheme = theme_minimal(),
main = ""
)
table(myCluster, data$GroupCat)
tree = hclust(dist(X), method= "single")
cut_off <- 6
myCluster <- cutree(tree, cut_off)
# plot dendrogram
fviz_dend(tree,
k = cut_off,
cex = 0.5,
k_colors = "jco",
color_labels_by_k = FALSE,
horiz = TRUE,
ggtheme = theme_minimal(),
main = ""
)
table(myCluster, data$GroupCat)
library("factoextra")
library(ggsci)
# EDA
data <-
read.csv("../data/filledDatabaseNUMONLY_042620.csv") %>%
clean_data() %>%
filter(!(GroupCat %in% c(3,5,6,16)))
X = data[,-c(1,2)] %>% as.matrix()
Y = data$GroupCat %>% as.matrix()
rownames(X) = paste0(data$GroupCat, "_", c(1:nrow(data)))
fviz_nbclust(X, FUN = hcut, method = "wss")
tree = hclust(dist(X), method= "single")
cut_off <- 4
myCluster <- cutree(tree, cut_off)
# plot dendrogram
fviz_dend(tree,
k = cut_off,
cex = 0.5,
k_colors = "jco",
color_labels_by_k = FALSE,
horiz = TRUE,
ggtheme = theme_minimal(),
main = ""
)
table(myCluster, data$GroupCat)
tree = hclust(dist(X), method= "complete")
cut_off <- 4
myCluster <- cutree(tree, cut_off)
# plot dendrogram
fviz_dend(tree,
k = cut_off,
cex = 0.5,
k_colors = "jco",
color_labels_by_k = FALSE,
horiz = TRUE,
ggtheme = theme_minimal(),
main = ""
)
table(myCluster, data$GroupCat)
tree = hclust(dist(X), method= "complete")
cut_off <- 5
myCluster <- cutree(tree, cut_off)
# plot dendrogram
fviz_dend(tree,
k = cut_off,
cex = 0.5,
k_colors = "jco",
color_labels_by_k = FALSE,
horiz = TRUE,
ggtheme = theme_minimal(),
main = ""
)
table(myCluster, data$GroupCat)
tree = hclust(dist(X), method= "average")
cut_off <- 5
myCluster <- cutree(tree, cut_off)
# plot dendrogram
fviz_dend(tree,
k = cut_off,
cex = 0.5,
k_colors = "jco",
color_labels_by_k = FALSE,
horiz = TRUE,
ggtheme = theme_minimal(),
main = ""
)
table(myCluster, data$GroupCat)
BIC <- mclustBIC(X)
library(mclust)
BIC <- mclustBIC(X)
model <- Mclust(X, x = BIC)
summary(model, parameters = TRUE)
plot(model, what = "classification")
plot(model, what = "classification")
