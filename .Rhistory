x = ~PC1,
y = ~PC2,
z = ~PC3,
color = ~Cluster,
colors = "Dark2",
text = ~Compound,
type = 'scatter3d', mode = 'markers',
opacity = 0.9)
rows_to_take <- Y != "O"
X_PC <- X_PC[rows_to_take,]
Y <- Y[rows_to_take]
X <- X[rows_to_take,] %>% remove_identical_cal()
# subset <- data %>% filter(X == "O") %>% filter(GroupCat != "NCOT") %>% droplevels()
# X <- subset[,-c(1:4)] %>% remove_identical_cal() %>% as.matrix()
# Y <- subset$GroupCat %>% droplevels() %>% as.matrix()
set.seed(2020)
folds <- caret::createFolds(1:nrow(X), k = 5, list = TRUE, returnTrain = FALSE)
ridge_cv = cv.glmnet(x = X, y = Y, alpha = 0, nfolds = 5,
type.measure = "deviance", family = "multinomial")
PC_arrow %>%
group_by(variable) %>%
plot_ly() %>%
add_trace(
x = ~PC1,
y = ~PC2,
z = ~PC3,
color = ~contribution,
text = ~variable,
type = 'scatter3d', mode = 'lines', opacity = 1,
line = list(width = 6, reverscale = FALSE)
) %>%
add_trace(
data = PC_point,
x = ~PC1,
y = ~PC2,
z = ~PC3,
color = ~Cluster,
colors = "Dark2",
text = ~Compound,
type = 'scatter3d', mode = 'markers',
opacity = 0.9)
#### -------------   step 1: ridge   ------------- ####
subset <- data %>% filter(X == "O") %>% filter(GroupCat != "NCOT") %>% droplevels()
X <- subset[,-c(1:4)] %>% remove_identical_cal() %>% as.matrix()
Y <- subset$GroupCat %>% droplevels() %>% as.matrix()
set.seed(2020)
folds <- caret::createFolds(1:nrow(X), k = 5, list = TRUE, returnTrain = FALSE)
ridge_cv = cv.glmnet(x = X, y = Y, alpha = 0, nfolds = 5,
type.measure = "deviance", family = "multinomial")
tb_ridge = prediction_table(alpha = 0, lambda = ridge_cv$lambda.min)
tb_ridge$r %>% print_accurate_tb()
tb_ridge$t[,-5] %>% highlight_tb_count()
tb_ridge$t[,-5] %>% highlight_tb_percent()
tb_ridge
#### -------------   step 2: lasso   ------------- ####
lasso_cv = cv.glmnet(x = X, y = Y, alpha = 1, nfolds = 5,
type.measure = "deviance", family = "multinomial")
tb_lasso = prediction_table(alpha = 0, lambda = lasso_cv$lambda.min)
tb_lasso$r %>% print_accurate_tb()
tb_lasso$t[,-5] %>% highlight_tb_count()
tb_lasso$t[,-5] %>% highlight_tb_percent()
lasso_cv %>% get_coef(tuning_parameter = lasso_cv$lambda.min) %>% View()
#### -------------   step 5: GBM   ------------- ####
library(gbm)
gbm_cv <- gbm(GroupCat~., data = subset[,-c(1:3)],
shrinkage = 0.01, distribution = "multinomial",
cv.folds = 5, n.trees = 3000, verbose = F)
best.iter = gbm.perf(gbm_cv, method="cv")
summary(gbm_cv) %>% View()
top3 <- c("ToleranceBVP","IonizationPotentialofA","CrystalRadiusofA")
X_top3 <- X %>% select(top3)
View(X)
top3 <- c("ToleranceBVP","IonizationPotentialofA","CrystalRadiusofA")
X_top3 <- X %>% select(top3)
X_top3 <- X[top3]
View(X_top3)
X_top3 <- X[,top3]
data.frame(Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_top3)
data.frame(
Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_top3) %>%
plot_ly() %>%
add_trace(
x = ~PC1,
y = ~PC2,
z = ~PC3,
color = ~Cluster,
colors = "Dark2",
text = ~Compound,
type = 'scatter3d', mode = 'markers',
opacity = 0.9
)
Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_top3) %>%
plot_ly() %>%
add_trace(
)
data.frame(
Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_top3) %>%
plot_ly() %>%
add_trace(
x = ~top3[1],
y = ~top3[2],
z = ~top3[3],
color = ~Cluster,
colors = "Dark2",
text = ~Compound,
type = 'scatter3d', mode = 'markers',
opacity = 0.9
)
data.frame(
Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_top3)
Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_top3) %>%
plot_ly() %>%
add_trace(
)
data.frame(
Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_top3) %>%
plot_ly() %>%
add_trace(
x = ~ToleranceBVP,
y = ~IonizationPotentialofA,
z = ~CrystalRadiusofA,
color = ~Cluster,
colors = "Dark2",
text = ~Compound,
type = 'scatter3d', mode = 'markers',
opacity = 0.9
)
Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_top3) %>%
plot_ly() %>%
add_trace(
)
data.frame(
Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_top3) %>%
plot_ly() %>%
add_trace(
x = ~ToleranceBVP,
y = ~IonizationPotentialofA,
z = ~CrystalRadiusofA,
color = ~Cluster,
colors = "Dark2",
text = ~Compound,
type = 'scatter3d', mode = 'markers',
opacity = 0.9, size = 3
)
data.frame(
Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_top3
) %>%
plot_ly() %>%
add_trace(
x = ~ToleranceBVP,
y = ~IonizationPotentialofA,
z = ~CrystalRadiusofA,
color = ~Cluster,
colors = "Dark2",
text = ~Compound,
type = 'scatter3d', mode = 'markers',
opacity = 0.9, size = 3
)
data.frame(
Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_top3
) %>%
plot_ly() %>%
add_trace(
x = ~ToleranceBVP,
y = ~IonizationPotentialofA,
z = ~CrystalRadiusofA,
color = ~Cluster,
colors = "Dark2",
text = ~Compound,
type = 'scatter3d', mode = 'markers',
opacity = 0.9, size = 6
)
data.frame(
Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_top3
) %>%
plot_ly() %>%
add_trace(
x = ~ToleranceBVP,
y = ~IonizationPotentialofA,
z = ~CrystalRadiusofA,
color = ~Cluster,
colors = "Dark2",
text = ~Compound,
type = 'scatter3d', mode = 'markers',
opacity = 0.9, size = 12
)
subset <- data %>% filter(X == "O")
table(subset$GroupCat) %>% sort(decreasing = TRUE)
subset <- data %>% filter(X == "O")
X <- subset[,-c(1:4)] %>% remove_identical_cal() %>% as.matrix()
Y <- subset$GroupCat %>% droplevels() %>% as.matrix()
top3 <- c("ToleranceBVP","IonizationPotentialofA","CrystalRadiusofA")
X_top3 <- X[,top3]
data.frame(
Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_top3
) %>%
plot_ly() %>%
add_trace(
x = ~ToleranceBVP,
y = ~IonizationPotentialofA,
z = ~CrystalRadiusofA,
color = ~Cluster,
colors = "Dark2",
text = ~Compound,
type = 'scatter3d', mode = 'markers',
opacity = 0.9, size = 12
)
data.frame(
Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_top3
) %>%
plot_ly() %>%
add_trace(
x = ~ToleranceBVP,
y = ~IonizationPotentialofA,
z = ~CrystalRadiusofA,
color = ~Cluster,
colors = "Dark2",
text = ~Compound,
type = 'scatter3d', mode = 'markers',
opacity = 0.9, width = 5
)
data.frame(
Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_top3
) %>%
plot_ly() %>%
add_trace(
x = ~ToleranceBVP,
y = ~IonizationPotentialofA,
z = ~CrystalRadiusofA,
color = ~Cluster,
colors = "Dark2",
text = ~Compound,
type = 'scatter3d', mode = 'markers',
opacity = 0.9
)
data.frame(
Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_top3
) %>%
plot_ly() %>%
add_trace(
x = ~ToleranceBVP,
y = ~IonizationPotentialofA,
z = ~CrystalRadiusofA,
color = ~Cluster,
colors = "Dark2",
text = ~Compound,
type = 'scatter3d', mode = 'markers',
opacity = 0.5
)
data.frame(
Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_top3
) %>%
plot_ly() %>%
add_trace(
x = ~ToleranceBVP,
y = ~IonizationPotentialofA,
z = ~CrystalRadiusofA,
color = ~Cluster,
colors = "Dark3",
text = ~Compound,
type = 'scatter3d', mode = 'markers',
opacity = 0.5
)
data.frame(
Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_top3
) %>%
plot_ly() %>%
add_trace(
x = ~ToleranceBVP,
y = ~IonizationPotentialofA,
z = ~CrystalRadiusofA,
color = ~Cluster,
colors = "Dark2",
text = ~Compound,
type = 'scatter3d', mode = 'markers',
opacity = 0.5
)
data.frame(
Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_top3
) %>%
plot_ly() %>%
add_trace(
x = ~ToleranceBVP,
y = ~IonizationPotentialofA,
z = ~CrystalRadiusofA,
color = ~Cluster,
colors = "D3",
text = ~Compound,
type = 'scatter3d', mode = 'markers',
opacity = 0.5
)
data.frame(
Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_top3
) %>%
plot_ly() %>%
add_trace(
x = ~ToleranceBVP,
y = ~IonizationPotentialofA,
z = ~CrystalRadiusofA,
color = ~Cluster,
colors = "Dark24",
text = ~Compound,
type = 'scatter3d', mode = 'markers',
opacity = 0.5
)
data.frame(
Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_top3
) %>%
plot_ly() %>%
add_trace(
x = ~ToleranceBVP,
y = ~IonizationPotentialofA,
z = ~CrystalRadiusofA,
color = ~Cluster,
colors = "Paired",
text = ~Compound,
type = 'scatter3d', mode = 'markers',
opacity = 0.5
)
data.frame(
Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_top3
) %>%
plot_ly() %>%
add_trace(
x = ~ToleranceBVP,
y = ~IonizationPotentialofA,
z = ~CrystalRadiusofA,
color = ~Cluster,
colors = "Paired",
text = ~Compound,
type = 'scatter3d', mode = 'markers'
)
data.frame(
Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_top3
) %>%
plot_ly() %>%
add_trace(
x = ~ToleranceBVP,
y = ~IonizationPotentialofA,
z = ~CrystalRadiusofA,
color = ~Cluster,
colors = "Paired",
text = ~Compound,
type = 'scatter3d', mode = 'markers',
opacity = 0.8
)
#### =====================  Anion F  ===================== ####
subset <- data %>% filter(X == "F")
table(subset$GroupCat) %>% sort(decreasing = TRUE)
X <- subset[,-c(1:4)] %>% remove_identical_cal() %>% as.matrix()
Y <- subset$GroupCat %>% droplevels() %>% as.matrix()
pca <- prcomp(X, scale = TRUE)
summary(pca)
X_PC <- pca$x[,1:17] %>% as.matrix()
PC_point <- data.frame(Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_PC)
PC <- pca$rotation %>%
as.data.frame() %>%
select(PC1,PC2,PC3) %>%
rownames_to_column("variable") %>%
mutate(tag = "end",
contribution = PC1^2 + PC2^2 + PC3^2)
PC[,2:4] <- PC[,2:4]*30
PC_initial <- PC %>% mutate(tag = "start")
PC_initial[,2:4] = 0
PC_arrow <- bind_rows(PC, PC_initial)
PC_arrow %>%
group_by(variable) %>%
plot_ly() %>%
add_trace(
x = ~PC1,
y = ~PC2,
z = ~PC3,
color = ~contribution,
text = ~variable,
type = 'scatter3d', mode = 'lines', opacity = 1,
line = list(width = 6, reverscale = FALSE)
) %>%
add_markers(
data = PC_point,
x = ~PC1,
y = ~PC2,
z = ~PC3,
color = ~Cluster,
colors = "Dark2",
text = ~Compound,
opacity = 0.9)
#### -------------   step 1: ridge   ------------- ####
subset <- data %>%
filter(X == "F") %>%
filter(!(GroupCat %in% c("LiNb03","NCOT"))) %>%
droplevels()
X <- subset[,-c(1:4)] %>% remove_identical_cal() %>% as.matrix()
Y <- subset$GroupCat %>% droplevels() %>% as.matrix()
set.seed(2020)
folds <- caret::createFolds(1:nrow(X), k = 5, list = TRUE, returnTrain = FALSE)
#### -------------   step 4: GBM   ------------- ####
gbm_cv <- gbm(GroupCat~., data = subset[,-c(1:3)],
shrinkage = 0.01, distribution = "multinomial",
cv.folds = 5, n.trees = 3000, verbose = F)
best.iter = gbm.perf(gbm_cv, method="cv")
summary(gbm_cv) %>% View()
fitControl = trainControl(method = "cv", number = 5, returnResamp = "all")
model2 = train(GroupCat~., data = subset[,-c(1:3)], method = "gbm",
distribution = "multinomial", trControl = fitControl, verbose=F,
tuneGrid = data.frame(.n.trees = best.iter,
.shrinkage=0.01,
.interaction.depth=1,
.n.minobsinnode=1))
model2
tb = confusionMatrix(model2)$table %>% as.matrix()
tb_sum = colSums(tb)
tb / tb_sum
subset <- data %>% filter(X == "F")
#### -------------   step 5: what we predict wrong  ------------- ####
subset <- data %>% filter(X == "F")
X <- subset[,-c(1:4)] %>% remove_identical_cal() %>% as.matrix()
Y <- subset$GroupCat %>% droplevels() %>% as.matrix()
top3 <- c("ToleranceBVP","IonizationPotentialofA","CrystalRadiusofBprime")
top3 <- c("ToleranceBVP","	DensityatSpecofA","CrystalRadiusofBprime")
X_top3 <- X[,top3]
#### -------------   step 5: what we predict wrong  ------------- ####
subset <- data %>% filter(X == "F")
X <- subset[,-c(1:4)] %>% remove_identical_cal() %>% as.matrix()
Y <- subset$GroupCat %>% droplevels() %>% as.matrix()
top3 <- c("ToleranceBVP","	DensityatSpecofA","CrystalRadiusofBprime")
X_top3 <- X[,top3]
#### -------------   step 5: what we predict wrong  ------------- ####
subset <- data %>% filter(X == "F")
X <- subset[,-c(1:4)] %>% remove_identical_cal() %>% as.matrix()
Y <- subset$GroupCat %>% droplevels() %>% as.matrix()
top3 <- c("ToleranceBVP","DensityatSpecofA","CrystalRadiusofBprime")
X_top3 <- X[,top3]
data.frame(
Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_top3
) %>%
plot_ly() %>%
add_trace(
x = ~ToleranceBVP,
y = ~IonizationPotentialofA,
z = ~CrystalRadiusofA,
color = ~Cluster,
colors = "Paired",
text = ~Compound,
type = 'scatter3d', mode = 'markers',
opacity = 0.8
)
data.frame(
Compound = subset$Compound,
Cluster = as.character(subset$GroupCat),
X_top3
) %>%
plot_ly() %>%
add_trace(
x = ~ToleranceBVP,
y = ~DensityatSpecofA,
z = ~CrystalRadiusofBprime,
color = ~Cluster,
colors = "Paired",
text = ~Compound,
type = 'scatter3d', mode = 'markers',
opacity = 0.8
)
