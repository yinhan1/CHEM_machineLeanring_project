knitr::opts_chunk$set(
fig.align = "center",
fig.pos = "H",
fig.width = 10,
fig.height = 10,
message = FALSE,
warning = FALSE,
external = TRUE,
echo = TRUE
)
library(tidyverse)
library(magrittr)
library(plotly)
library(fastDummies)
library(ggalt)
library(reshape2)
library(RColorBrewer)
library(kableExtra)
library(ggsci)
library(cluster)
library(factoextra)
library(mclust)
library(neuralnet)
library(dendextend)  # color dendrogram
source("../R script/functions.R")
knitr::opts_chunk$set(
fig.align = "center",
fig.pos = "H",
fig.width = 5,
fig.height = 3,
message = FALSE,
warning = FALSE,
external = TRUE,
echo = TRUE
)
library(tidyverse)
library(magrittr)
library(ggsci)
library(kableExtra)
source("../scripts/functions.R")
# load raw data files
data <- read.csv("../data/filledDatabase.csv")[,-c(2:9,11:13)]
# clean data
data <- clean_data(data) %>% collapse_data()
# separate compound and group_cate from the predictors
compound <- data$Compound
group_cat <- data$GroupCat
space_group <- data$SpaceGroup
# create data constructed by first 13 PC's
data <- select(data, -c("Compound","Z","X","SpaceGroup","SpaceGroupNumber"))
# data_pca <- get_pc_space(data[,-1], k = 13) %>% scale() %>% data.frame()
# split data into 5 folds for cross validation later
folds <- caret::createFolds(1:nrow(data), k = 5, list = TRUE, returnTrain = FALSE)
knitr::opts_chunk$set(
fig.align = "center",
fig.pos = "H",
fig.width = 10,
fig.height = 10,
message = FALSE,
warning = FALSE,
external = TRUE,
echo = FALSE
)
library(tidyverse)
library(magrittr)
library(ggsci)
library(kableExtra)
library(glmnet)
library(caret)
source("../scripts/functions.R")
# load raw data files
data <- read.csv("../data/filledDatabase.csv")[,-c(2:9,11:13)]
# clean data
data <- clean_data(data) %>% collapse_data()
# separate compound and group_cate from the predictors
compound <- data$Compound
group_cat <- data$GroupCat
space_group <- data$SpaceGroup
# create data constructed by first 13 PC's
data <- select(data, -c("Compound","Z","SpaceGroup","SpaceGroupNumber"))
anion = c("O","F")
X = data[data$X != anion,-c(1,2)] %>% remove_identical_cal() %>% as.matrix()
Y = data$GroupCat[data$X != anion] %>% as.matrix()
folds <- createFolds(1:nrow(X), k = 5, list = TRUE, returnTrain = FALSE)
ridge_cv <- cv.glmnet(x = X, y = Y, alpha = 0, nfolds = 5, type.measure = "deviance", family = "multinomial")
tb =
ridge_cv %>%
get_coef(tuning_parameter = ridge_cv$lambda.min) %>%
select(feature, Cubic, Tilted, Others) %>%
filter(feature != "(Intercept)") %>%
mutate(tag = rep(c(1,2,3), each = 34))
117/3
ridge_cv <- cv.glmnet(x = X, y = Y, alpha = 0, nfolds = 5, type.measure = "deviance", family = "multinomial")
tb =
ridge_cv %>%
get_coef(tuning_parameter = ridge_cv$lambda.min) %>%
select(feature, Cubic, Tilted, Others) %>%
filter(feature != "(Intercept)") %>%
mutate(tag = rep(c(1,2,3), each = 39))
tb %>% filter(tag == 3) %>% plot_coef()
lasso_cv <- cv.glmnet(x = X, y = Y, alpha = 1, nfolds = 5, type.measure = "deviance", family = "multinomial")
tb =
lasso_cv %>%
get_coef(tuning_parameter = lasso_cv$lambda.min) %>%
select(feature, Cubic, Tilted, Others) %>%
filter(feature != "(Intercept)") %>%
mutate(tag = rep(c(1,2,3), each=39))
tb %>% filter(tag == 3) %>% plot_coef()
elastic_cv <-
train(GroupCat ~., data = data.frame(X, GroupCat=Y), method = "glmnet",
trControl = trainControl("cv", number = 5),
tuneLength = 10)
tb =
elastic_cv$finalModel %>%
get_coef(tuning_parameter = elastic_cv$bestTune$lambda) %>%
select(feature, Cubic, Tilted, Others) %>%
filter(feature != "(Intercept)") %>%
mutate(tag = rep(c(1,2,3), each=39))
tb %>% filter(tag == 3) %>% plot_coef()
tb %>% filter(tag == 2) %>% plot_coef()
tb %>% filter(tag == 1) %>% plot_coef()
tb_ridge = prediction_table(alpha = 0, lambda = ridge_cv$lambda.min)
tb_ridge$r %>% print_accurate_tb()
tb_ridge$t %>% highlight_tb_count()
tb_ridge$t %>% highlight_tb_percent()
tb_lasso = prediction_table(alpha = 1, lambda = lasso_cv$lambda.min)
tb_lasso$r %>% print_accurate_tb()
tb_lasso$t %>% highlight_tb_count()
tb_lasso$t %>% highlight_tb_percent()
